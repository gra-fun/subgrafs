// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class TokenSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenSale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenSale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenSale", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenSale | null {
    return changetype<TokenSale | null>(store.get_in_block("TokenSale", id));
  }

  static load(id: string): TokenSale | null {
    return changetype<TokenSale | null>(store.get("TokenSale", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get url(): string {
    let value = this.get("url");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }

  get referralLink(): Bytes | null {
    let value = this.get("referralLink");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set referralLink(value: Bytes | null) {
    if (!value) {
      this.unset("referralLink");
    } else {
      this.set("referralLink", Value.fromBytes(<Bytes>value));
    }
  }

  get withDao(): boolean {
    let value = this.get("withDao");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set withDao(value: boolean) {
    this.set("withDao", Value.fromBoolean(value));
  }

  get daoAddress(): Bytes | null {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes | null) {
    if (!value) {
      this.unset("daoAddress");
    } else {
      this.set("daoAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get finishingTime(): BigInt {
    let value = this.get("finishingTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set finishingTime(value: BigInt) {
    this.set("finishingTime", Value.fromBigInt(value));
  }

  get maxWalletAmount(): BigInt {
    let value = this.get("maxWalletAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxWalletAmount(value: BigInt) {
    this.set("maxWalletAmount", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get creationTxHash(): Bytes {
    let value = this.get("creationTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creationTxHash(value: Bytes) {
    this.set("creationTxHash", Value.fromBytes(value));
  }

  get isFinished(): boolean {
    let value = this.get("isFinished");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isFinished(value: boolean) {
    this.set("isFinished", Value.fromBoolean(value));
  }

  get vTokenBalance(): BigInt {
    let value = this.get("vTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set vTokenBalance(value: BigInt) {
    this.set("vTokenBalance", Value.fromBigInt(value));
  }

  get vBNBBalance(): BigInt {
    let value = this.get("vBNBBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set vBNBBalance(value: BigInt) {
    this.set("vBNBBalance", Value.fromBigInt(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }

  get BNBBalance(): BigInt {
    let value = this.get("BNBBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set BNBBalance(value: BigInt) {
    this.set("BNBBalance", Value.fromBigInt(value));
  }

  get daoBalance(): BigInt {
    let value = this.get("daoBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set daoBalance(value: BigInt) {
    this.set("daoBalance", Value.fromBigInt(value));
  }

  get totalTokensSold(): BigInt {
    let value = this.get("totalTokensSold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokensSold(value: BigInt) {
    this.set("totalTokensSold", Value.fromBigInt(value));
  }

  get totalBnbVolume(): BigInt {
    let value = this.get("totalBnbVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBnbVolume(value: BigInt) {
    this.set("totalBnbVolume", Value.fromBigInt(value));
  }

  get totalTokenVolume(): BigInt {
    let value = this.get("totalTokenVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokenVolume(value: BigInt) {
    this.set("totalTokenVolume", Value.fromBigInt(value));
  }

  get last24HourBnbVolume(): BigInt {
    let value = this.get("last24HourBnbVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set last24HourBnbVolume(value: BigInt) {
    this.set("last24HourBnbVolume", Value.fromBigInt(value));
  }

  get last24HourUSDVolume(): BigInt {
    let value = this.get("last24HourUSDVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set last24HourUSDVolume(value: BigInt) {
    this.set("last24HourUSDVolume", Value.fromBigInt(value));
  }

  get last24HourTokenVolume(): BigInt {
    let value = this.get("last24HourTokenVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set last24HourTokenVolume(value: BigInt) {
    this.set("last24HourTokenVolume", Value.fromBigInt(value));
  }

  get price24hChange(): BigDecimal {
    let value = this.get("price24hChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set price24hChange(value: BigDecimal) {
    this.set("price24hChange", Value.fromBigDecimal(value));
  }

  get SoldPercentage(): BigDecimal {
    let value = this.get("SoldPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set SoldPercentage(value: BigDecimal) {
    this.set("SoldPercentage", Value.fromBigDecimal(value));
  }

  get lastHourSoldPercentage(): BigDecimal {
    let value = this.get("lastHourSoldPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set lastHourSoldPercentage(value: BigDecimal) {
    this.set("lastHourSoldPercentage", Value.fromBigDecimal(value));
  }

  get lastHourUpdateTimestamp(): BigInt {
    let value = this.get("lastHourUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastHourUpdateTimestamp(value: BigInt) {
    this.set("lastHourUpdateTimestamp", Value.fromBigInt(value));
  }

  get swapsCount(): BigInt {
    let value = this.get("swapsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set swapsCount(value: BigInt) {
    this.set("swapsCount", Value.fromBigInt(value));
  }

  get providedTokenLiquidity(): BigInt {
    let value = this.get("providedTokenLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set providedTokenLiquidity(value: BigInt) {
    this.set("providedTokenLiquidity", Value.fromBigInt(value));
  }

  get providedBNBLiquidity(): BigInt {
    let value = this.get("providedBNBLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set providedBNBLiquidity(value: BigInt) {
    this.set("providedBNBLiquidity", Value.fromBigInt(value));
  }

  get lastPrice(): BigInt {
    let value = this.get("lastPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastPrice(value: BigInt) {
    this.set("lastPrice", Value.fromBigInt(value));
  }

  get bnbMarketCap(): BigInt {
    let value = this.get("bnbMarketCap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbMarketCap(value: BigInt) {
    this.set("bnbMarketCap", Value.fromBigInt(value));
  }

  get liquidityMigrationTimestamp(): BigInt | null {
    let value = this.get("liquidityMigrationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidityMigrationTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("liquidityMigrationTimestamp");
    } else {
      this.set("liquidityMigrationTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get pancakeSwapPool(): PancakeSwapPoolLoader {
    return new PancakeSwapPoolLoader(
      "TokenSale",
      this.get("id")!.toString(),
      "pancakeSwapPool",
    );
  }

  get swaps(): SwapLoader {
    return new SwapLoader("TokenSale", this.get("id")!.toString(), "swaps");
  }

  get candlesticks(): CandlestickLoader {
    return new CandlestickLoader(
      "TokenSale",
      this.get("id")!.toString(),
      "candlesticks",
    );
  }

  get userTokenSales(): UserTokenSaleLoader {
    return new UserTokenSaleLoader(
      "TokenSale",
      this.get("id")!.toString(),
      "userTokenSales",
    );
  }
}

export class PancakeSwapPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PancakeSwapPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PancakeSwapPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PancakeSwapPool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PancakeSwapPool | null {
    return changetype<PancakeSwapPool | null>(
      store.get_in_block("PancakeSwapPool", id),
    );
  }

  static load(id: string): PancakeSwapPool | null {
    return changetype<PancakeSwapPool | null>(store.get("PancakeSwapPool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenSale(): string {
    let value = this.get("tokenSale");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenSale(value: string) {
    this.set("tokenSale", Value.fromString(value));
  }

  get token0(): Bytes {
    let value = this.get("token0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token0(value: Bytes) {
    this.set("token0", Value.fromBytes(value));
  }

  get token1(): Bytes {
    let value = this.get("token1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token1(value: Bytes) {
    this.set("token1", Value.fromBytes(value));
  }

  get fee(): i32 {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set fee(value: i32) {
    this.set("fee", Value.fromI32(value));
  }

  get sqrtPriceX96(): BigInt {
    let value = this.get("sqrtPriceX96");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sqrtPriceX96(value: BigInt) {
    this.set("sqrtPriceX96", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get tick(): BigInt {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt) {
    this.set("tick", Value.fromBigInt(value));
  }

  get observationIndex(): BigInt {
    let value = this.get("observationIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set observationIndex(value: BigInt) {
    this.set("observationIndex", Value.fromBigInt(value));
  }

  get volumeToken0(): BigInt {
    let value = this.get("volumeToken0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volumeToken0(value: BigInt) {
    this.set("volumeToken0", Value.fromBigInt(value));
  }

  get volumeToken1(): BigInt {
    let value = this.get("volumeToken1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volumeToken1(value: BigInt) {
    this.set("volumeToken1", Value.fromBigInt(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get reserve0(): BigInt {
    let value = this.get("reserve0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserve0(value: BigInt) {
    this.set("reserve0", Value.fromBigInt(value));
  }

  get reserve1(): BigInt {
    let value = this.get("reserve1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserve1(value: BigInt) {
    this.set("reserve1", Value.fromBigInt(value));
  }
}

export class DailyStatistics extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyStatistics entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyStatistics must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DailyStatistics", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyStatistics | null {
    return changetype<DailyStatistics | null>(
      store.get_in_block("DailyStatistics", id),
    );
  }

  static load(id: string): DailyStatistics | null {
    return changetype<DailyStatistics | null>(store.get("DailyStatistics", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get cumulativeFeesBNB(): BigInt {
    let value = this.get("cumulativeFeesBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeFeesBNB(value: BigInt) {
    this.set("cumulativeFeesBNB", Value.fromBigInt(value));
  }

  get cumulativeFeesUSD(): BigInt {
    let value = this.get("cumulativeFeesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeFeesUSD(value: BigInt) {
    this.set("cumulativeFeesUSD", Value.fromBigInt(value));
  }

  get cumulativeRevenueBNB(): BigInt {
    let value = this.get("cumulativeRevenueBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeRevenueBNB(value: BigInt) {
    this.set("cumulativeRevenueBNB", Value.fromBigInt(value));
  }

  get cumulativeRevenueUSD(): BigInt {
    let value = this.get("cumulativeRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeRevenueUSD(value: BigInt) {
    this.set("cumulativeRevenueUSD", Value.fromBigInt(value));
  }

  get cumulativeUniqueHolders(): BigInt {
    let value = this.get("cumulativeUniqueHolders");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeUniqueHolders(value: BigInt) {
    this.set("cumulativeUniqueHolders", Value.fromBigInt(value));
  }

  get cumulativeUniqueActiveUsers(): BigInt {
    let value = this.get("cumulativeUniqueActiveUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeUniqueActiveUsers(value: BigInt) {
    this.set("cumulativeUniqueActiveUsers", Value.fromBigInt(value));
  }

  get cumulativeTokenSalesCreated(): BigInt {
    let value = this.get("cumulativeTokenSalesCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeTokenSalesCreated(value: BigInt) {
    this.set("cumulativeTokenSalesCreated", Value.fromBigInt(value));
  }

  get cumulativeTradingVolumeBNB(): BigInt {
    let value = this.get("cumulativeTradingVolumeBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeTradingVolumeBNB(value: BigInt) {
    this.set("cumulativeTradingVolumeBNB", Value.fromBigInt(value));
  }

  get cumulativeTradingVolumeUSD(): BigInt {
    let value = this.get("cumulativeTradingVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeTradingVolumeUSD(value: BigInt) {
    this.set("cumulativeTradingVolumeUSD", Value.fromBigInt(value));
  }
}

export class BNBPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BNBPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BNBPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BNBPrice", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BNBPrice | null {
    return changetype<BNBPrice | null>(store.get_in_block("BNBPrice", id));
  }

  static load(id: string): BNBPrice | null {
    return changetype<BNBPrice | null>(store.get("BNBPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bnbPrice(): BigInt {
    let value = this.get("bnbPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbPrice(value: BigInt) {
    this.set("bnbPrice", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Swap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Swap | null {
    return changetype<Swap | null>(store.get_in_block("Swap", id));
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenSale(): string {
    let value = this.get("tokenSale");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenSale(value: string) {
    this.set("tokenSale", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get referrer(): string | null {
    let value = this.get("referrer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referrer(value: string | null) {
    if (!value) {
      this.unset("referrer");
    } else {
      this.set("referrer", Value.fromString(<string>value));
    }
  }

  get isBuy(): boolean {
    let value = this.get("isBuy");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isBuy(value: boolean) {
    this.set("isBuy", Value.fromBoolean(value));
  }

  get bnbAmount(): BigInt {
    let value = this.get("bnbAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbAmount(value: BigInt) {
    this.set("bnbAmount", Value.fromBigInt(value));
  }

  get bnbPrice(): BigInt {
    let value = this.get("bnbPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbPrice(value: BigInt) {
    this.set("bnbPrice", Value.fromBigInt(value));
  }

  get usdAmount(): BigInt {
    let value = this.get("usdAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdAmount(value: BigInt) {
    this.set("usdAmount", Value.fromBigInt(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get bnbFee(): BigInt {
    let value = this.get("bnbFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbFee(value: BigInt) {
    this.set("bnbFee", Value.fromBigInt(value));
  }

  get daoFee(): BigInt {
    let value = this.get("daoFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set daoFee(value: BigInt) {
    this.set("daoFee", Value.fromBigInt(value));
  }

  get referrerCommission(): BigInt {
    let value = this.get("referrerCommission");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set referrerCommission(value: BigInt) {
    this.set("referrerCommission", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get source(): string {
    let value = this.get("source");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swaps(): SwapLoader {
    return new SwapLoader("User", this.get("id")!.toString(), "swaps");
  }

  get userTokenSales(): UserTokenSaleLoader {
    return new UserTokenSaleLoader(
      "User",
      this.get("id")!.toString(),
      "userTokenSales",
    );
  }

  get referrer(): string | null {
    let value = this.get("referrer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referrer(value: string | null) {
    if (!value) {
      this.unset("referrer");
    } else {
      this.set("referrer", Value.fromString(<string>value));
    }
  }

  get createdTokenSalesCount(): BigInt {
    let value = this.get("createdTokenSalesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTokenSalesCount(value: BigInt) {
    this.set("createdTokenSalesCount", Value.fromBigInt(value));
  }

  get totalTradesCount(): BigInt {
    let value = this.get("totalTradesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradesCount(value: BigInt) {
    this.set("totalTradesCount", Value.fromBigInt(value));
  }

  get totalBuyVolumeBNB(): BigInt {
    let value = this.get("totalBuyVolumeBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBuyVolumeBNB(value: BigInt) {
    this.set("totalBuyVolumeBNB", Value.fromBigInt(value));
  }

  get totalSellVolumeBNB(): BigInt {
    let value = this.get("totalSellVolumeBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSellVolumeBNB(value: BigInt) {
    this.set("totalSellVolumeBNB", Value.fromBigInt(value));
  }

  get totalVolumeBNB(): BigInt {
    let value = this.get("totalVolumeBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeBNB(value: BigInt) {
    this.set("totalVolumeBNB", Value.fromBigInt(value));
  }

  get totalVolumeUSD(): BigInt {
    let value = this.get("totalVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeUSD(value: BigInt) {
    this.set("totalVolumeUSD", Value.fromBigInt(value));
  }

  get totalTokenSaleTradesCount(): BigInt {
    let value = this.get("totalTokenSaleTradesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokenSaleTradesCount(value: BigInt) {
    this.set("totalTokenSaleTradesCount", Value.fromBigInt(value));
  }

  get totalTokenSaleBuyVolumeBNB(): BigInt {
    let value = this.get("totalTokenSaleBuyVolumeBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokenSaleBuyVolumeBNB(value: BigInt) {
    this.set("totalTokenSaleBuyVolumeBNB", Value.fromBigInt(value));
  }

  get totalTokenSaleSellVolumeBNB(): BigInt {
    let value = this.get("totalTokenSaleSellVolumeBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokenSaleSellVolumeBNB(value: BigInt) {
    this.set("totalTokenSaleSellVolumeBNB", Value.fromBigInt(value));
  }

  get totalTokenSaleVolumeBNB(): BigInt {
    let value = this.get("totalTokenSaleVolumeBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokenSaleVolumeBNB(value: BigInt) {
    this.set("totalTokenSaleVolumeBNB", Value.fromBigInt(value));
  }

  get totalTokenSaleVolumeUSD(): BigInt {
    let value = this.get("totalTokenSaleVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokenSaleVolumeUSD(value: BigInt) {
    this.set("totalTokenSaleVolumeUSD", Value.fromBigInt(value));
  }

  get totalProxyDEXTradesCount(): BigInt {
    let value = this.get("totalProxyDEXTradesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProxyDEXTradesCount(value: BigInt) {
    this.set("totalProxyDEXTradesCount", Value.fromBigInt(value));
  }

  get totalProxyDEXBuyVolumeBNB(): BigInt {
    let value = this.get("totalProxyDEXBuyVolumeBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProxyDEXBuyVolumeBNB(value: BigInt) {
    this.set("totalProxyDEXBuyVolumeBNB", Value.fromBigInt(value));
  }

  get totalProxyDEXSaleSellVolumeBNB(): BigInt {
    let value = this.get("totalProxyDEXSaleSellVolumeBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProxyDEXSaleSellVolumeBNB(value: BigInt) {
    this.set("totalProxyDEXSaleSellVolumeBNB", Value.fromBigInt(value));
  }

  get totalProxyDEXSaleVolumeBNB(): BigInt {
    let value = this.get("totalProxyDEXSaleVolumeBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProxyDEXSaleVolumeBNB(value: BigInt) {
    this.set("totalProxyDEXSaleVolumeBNB", Value.fromBigInt(value));
  }

  get totalProxyDEXSaleVolumeUSD(): BigInt {
    let value = this.get("totalProxyDEXSaleVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProxyDEXSaleVolumeUSD(value: BigInt) {
    this.set("totalProxyDEXSaleVolumeUSD", Value.fromBigInt(value));
  }

  get totalReferrerCommissionBNB(): BigInt {
    let value = this.get("totalReferrerCommissionBNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalReferrerCommissionBNB(value: BigInt) {
    this.set("totalReferrerCommissionBNB", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class Referrer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Referrer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Referrer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Referrer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Referrer | null {
    return changetype<Referrer | null>(store.get_in_block("Referrer", id));
  }

  static load(id: string): Referrer | null {
    return changetype<Referrer | null>(store.get("Referrer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swaps(): SwapLoader {
    return new SwapLoader("Referrer", this.get("id")!.toString(), "swaps");
  }

  get totalCommission(): BigInt {
    let value = this.get("totalCommission");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCommission(value: BigInt) {
    this.set("totalCommission", Value.fromBigInt(value));
  }

  get activeReferrals(): UserLoader {
    return new UserLoader(
      "Referrer",
      this.get("id")!.toString(),
      "activeReferrals",
    );
  }

  get totalActiveReferrals(): BigInt {
    let value = this.get("totalActiveReferrals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalActiveReferrals(value: BigInt) {
    this.set("totalActiveReferrals", Value.fromBigInt(value));
  }
}

export class Candlestick extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Candlestick entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Candlestick must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Candlestick", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Candlestick | null {
    return changetype<Candlestick | null>(
      store.get_in_block("Candlestick", id),
    );
  }

  static load(id: string): Candlestick | null {
    return changetype<Candlestick | null>(store.get("Candlestick", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenSale(): string {
    let value = this.get("tokenSale");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenSale(value: string) {
    this.set("tokenSale", Value.fromString(value));
  }

  get interval(): string {
    let value = this.get("interval");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set interval(value: string) {
    this.set("interval", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }

  get bnbVolume(): BigInt {
    let value = this.get("bnbVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbVolume(value: BigInt) {
    this.set("bnbVolume", Value.fromBigInt(value));
  }

  get usdVolume(): BigInt {
    let value = this.get("usdVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdVolume(value: BigInt) {
    this.set("usdVolume", Value.fromBigInt(value));
  }

  get tokensBought(): BigInt {
    let value = this.get("tokensBought");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokensBought(value: BigInt) {
    this.set("tokensBought", Value.fromBigInt(value));
  }

  get tokensSold(): BigInt {
    let value = this.get("tokensSold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokensSold(value: BigInt) {
    this.set("tokensSold", Value.fromBigInt(value));
  }

  get bnbBuyVolume(): BigInt {
    let value = this.get("bnbBuyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbBuyVolume(value: BigInt) {
    this.set("bnbBuyVolume", Value.fromBigInt(value));
  }

  get bnbSellVolume(): BigInt {
    let value = this.get("bnbSellVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbSellVolume(value: BigInt) {
    this.set("bnbSellVolume", Value.fromBigInt(value));
  }

  get usdBuyVolume(): BigInt {
    let value = this.get("usdBuyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdBuyVolume(value: BigInt) {
    this.set("usdBuyVolume", Value.fromBigInt(value));
  }

  get usdSellVolume(): BigInt {
    let value = this.get("usdSellVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdSellVolume(value: BigInt) {
    this.set("usdSellVolume", Value.fromBigInt(value));
  }
}

export class UserTokenSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserTokenSale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserTokenSale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserTokenSale", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserTokenSale | null {
    return changetype<UserTokenSale | null>(
      store.get_in_block("UserTokenSale", id),
    );
  }

  static load(id: string): UserTokenSale | null {
    return changetype<UserTokenSale | null>(store.get("UserTokenSale", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get tokenSale(): string {
    let value = this.get("tokenSale");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenSale(value: string) {
    this.set("tokenSale", Value.fromString(value));
  }

  get tokensBought(): BigInt {
    let value = this.get("tokensBought");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokensBought(value: BigInt) {
    this.set("tokensBought", Value.fromBigInt(value));
  }

  get tokensSold(): BigInt {
    let value = this.get("tokensSold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokensSold(value: BigInt) {
    this.set("tokensSold", Value.fromBigInt(value));
  }

  get currentBalance(): BigInt {
    let value = this.get("currentBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentBalance(value: BigInt) {
    this.set("currentBalance", Value.fromBigInt(value));
  }
}

export class RawEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RawEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RawEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RawEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RawEvent | null {
    return changetype<RawEvent | null>(store.get_in_block("RawEvent", id));
  }

  static load(id: string): RawEvent | null {
    return changetype<RawEvent | null>(store.get("RawEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tokenSaleCreatedEvents(): RawTokenSaleCreatedEventLoader {
    return new RawTokenSaleCreatedEventLoader(
      "RawEvent",
      this.get("id")!.toString(),
      "tokenSaleCreatedEvents",
    );
  }

  get tokenSaleConfigEvents(): RawTokenSaleConfigEventLoader {
    return new RawTokenSaleConfigEventLoader(
      "RawEvent",
      this.get("id")!.toString(),
      "tokenSaleConfigEvents",
    );
  }

  get tokenSaleFinishedEvents(): RawTokenSaleFinishedEventLoader {
    return new RawTokenSaleFinishedEventLoader(
      "RawEvent",
      this.get("id")!.toString(),
      "tokenSaleFinishedEvents",
    );
  }

  get swapEvents(): RawSwapEventLoader {
    return new RawSwapEventLoader(
      "RawEvent",
      this.get("id")!.toString(),
      "swapEvents",
    );
  }

  get syncEvents(): RawSyncEventLoader {
    return new RawSyncEventLoader(
      "RawEvent",
      this.get("id")!.toString(),
      "syncEvents",
    );
  }

  get redeemEvents(): RawRedeemEventLoader {
    return new RawRedeemEventLoader(
      "RawEvent",
      this.get("id")!.toString(),
      "redeemEvents",
    );
  }
}

export class RawTokenSaleCreatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RawTokenSaleCreatedEvent entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RawTokenSaleCreatedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RawTokenSaleCreatedEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RawTokenSaleCreatedEvent | null {
    return changetype<RawTokenSaleCreatedEvent | null>(
      store.get_in_block("RawTokenSaleCreatedEvent", id),
    );
  }

  static load(id: string): RawTokenSaleCreatedEvent | null {
    return changetype<RawTokenSaleCreatedEvent | null>(
      store.get("RawTokenSaleCreatedEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rawEvent(): string {
    let value = this.get("rawEvent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rawEvent(value: string) {
    this.set("rawEvent", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get url(): string {
    let value = this.get("url");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }

  get referralLink(): Bytes | null {
    let value = this.get("referralLink");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set referralLink(value: Bytes | null) {
    if (!value) {
      this.unset("referralLink");
    } else {
      this.set("referralLink", Value.fromBytes(<Bytes>value));
    }
  }
}

export class RawTokenSaleConfigEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RawTokenSaleConfigEvent entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RawTokenSaleConfigEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RawTokenSaleConfigEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RawTokenSaleConfigEvent | null {
    return changetype<RawTokenSaleConfigEvent | null>(
      store.get_in_block("RawTokenSaleConfigEvent", id),
    );
  }

  static load(id: string): RawTokenSaleConfigEvent | null {
    return changetype<RawTokenSaleConfigEvent | null>(
      store.get("RawTokenSaleConfigEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rawEvent(): string {
    let value = this.get("rawEvent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rawEvent(value: string) {
    this.set("rawEvent", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get withDao(): boolean {
    let value = this.get("withDao");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set withDao(value: boolean) {
    this.set("withDao", Value.fromBoolean(value));
  }

  get finishingTime(): BigInt {
    let value = this.get("finishingTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set finishingTime(value: BigInt) {
    this.set("finishingTime", Value.fromBigInt(value));
  }

  get maxWalletAmount(): BigInt {
    let value = this.get("maxWalletAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxWalletAmount(value: BigInt) {
    this.set("maxWalletAmount", Value.fromBigInt(value));
  }

  get vTokenBalance(): BigInt {
    let value = this.get("vTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set vTokenBalance(value: BigInt) {
    this.set("vTokenBalance", Value.fromBigInt(value));
  }

  get vBNBBalance(): BigInt {
    let value = this.get("vBNBBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set vBNBBalance(value: BigInt) {
    this.set("vBNBBalance", Value.fromBigInt(value));
  }
}

export class RawTokenSaleFinishedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RawTokenSaleFinishedEvent entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RawTokenSaleFinishedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RawTokenSaleFinishedEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RawTokenSaleFinishedEvent | null {
    return changetype<RawTokenSaleFinishedEvent | null>(
      store.get_in_block("RawTokenSaleFinishedEvent", id),
    );
  }

  static load(id: string): RawTokenSaleFinishedEvent | null {
    return changetype<RawTokenSaleFinishedEvent | null>(
      store.get("RawTokenSaleFinishedEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rawEvent(): string {
    let value = this.get("rawEvent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rawEvent(value: string) {
    this.set("rawEvent", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get dao(): Bytes {
    let value = this.get("dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set dao(value: Bytes) {
    this.set("dao", Value.fromBytes(value));
  }

  get tokenReserve(): BigInt {
    let value = this.get("tokenReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenReserve(value: BigInt) {
    this.set("tokenReserve", Value.fromBigInt(value));
  }

  get bnbReserve(): BigInt {
    let value = this.get("bnbReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbReserve(value: BigInt) {
    this.set("bnbReserve", Value.fromBigInt(value));
  }

  get sentToDao(): BigInt {
    let value = this.get("sentToDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sentToDao(value: BigInt) {
    this.set("sentToDao", Value.fromBigInt(value));
  }
}

export class RawSwapEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RawSwapEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RawSwapEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RawSwapEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RawSwapEvent | null {
    return changetype<RawSwapEvent | null>(
      store.get_in_block("RawSwapEvent", id),
    );
  }

  static load(id: string): RawSwapEvent | null {
    return changetype<RawSwapEvent | null>(store.get("RawSwapEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rawEvent(): string {
    let value = this.get("rawEvent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rawEvent(value: string) {
    this.set("rawEvent", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get referrer(): Bytes {
    let value = this.get("referrer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set referrer(value: Bytes) {
    this.set("referrer", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get isBuy(): boolean {
    let value = this.get("isBuy");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isBuy(value: boolean) {
    this.set("isBuy", Value.fromBoolean(value));
  }

  get bnbAmount(): BigInt {
    let value = this.get("bnbAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbAmount(value: BigInt) {
    this.set("bnbAmount", Value.fromBigInt(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get bnbFee(): BigInt {
    let value = this.get("bnbFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbFee(value: BigInt) {
    this.set("bnbFee", Value.fromBigInt(value));
  }

  get daoFee(): BigInt {
    let value = this.get("daoFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set daoFee(value: BigInt) {
    this.set("daoFee", Value.fromBigInt(value));
  }
}

export class RawSyncEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RawSyncEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RawSyncEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RawSyncEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RawSyncEvent | null {
    return changetype<RawSyncEvent | null>(
      store.get_in_block("RawSyncEvent", id),
    );
  }

  static load(id: string): RawSyncEvent | null {
    return changetype<RawSyncEvent | null>(store.get("RawSyncEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rawEvent(): string {
    let value = this.get("rawEvent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rawEvent(value: string) {
    this.set("rawEvent", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get startPrice(): BigInt {
    let value = this.get("startPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startPrice(value: BigInt) {
    this.set("startPrice", Value.fromBigInt(value));
  }

  get endPrice(): BigInt {
    let value = this.get("endPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endPrice(value: BigInt) {
    this.set("endPrice", Value.fromBigInt(value));
  }

  get bnbAmount(): BigInt {
    let value = this.get("bnbAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbAmount(value: BigInt) {
    this.set("bnbAmount", Value.fromBigInt(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get bnbReserve(): BigInt {
    let value = this.get("bnbReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnbReserve(value: BigInt) {
    this.set("bnbReserve", Value.fromBigInt(value));
  }

  get tokenReserve(): BigInt {
    let value = this.get("tokenReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenReserve(value: BigInt) {
    this.set("tokenReserve", Value.fromBigInt(value));
  }
}

export class RawRedeemEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RawRedeemEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RawRedeemEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RawRedeemEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RawRedeemEvent | null {
    return changetype<RawRedeemEvent | null>(
      store.get_in_block("RawRedeemEvent", id),
    );
  }

  static load(id: string): RawRedeemEvent | null {
    return changetype<RawRedeemEvent | null>(store.get("RawRedeemEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rawEvent(): string {
    let value = this.get("rawEvent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rawEvent(value: string) {
    this.set("rawEvent", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get wethAmount(): BigInt {
    let value = this.get("wethAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set wethAmount(value: BigInt) {
    this.set("wethAmount", Value.fromBigInt(value));
  }
}

export class RawPancakeSwapEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RawPancakeSwapEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RawPancakeSwapEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RawPancakeSwapEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RawPancakeSwapEvent | null {
    return changetype<RawPancakeSwapEvent | null>(
      store.get_in_block("RawPancakeSwapEvent", id),
    );
  }

  static load(id: string): RawPancakeSwapEvent | null {
    return changetype<RawPancakeSwapEvent | null>(
      store.get("RawPancakeSwapEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get tokenSale(): string {
    let value = this.get("tokenSale");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenSale(value: string) {
    this.set("tokenSale", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount0(): BigInt {
    let value = this.get("amount0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount0(value: BigInt) {
    this.set("amount0", Value.fromBigInt(value));
  }

  get amount1(): BigInt {
    let value = this.get("amount1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount1(value: BigInt) {
    this.set("amount1", Value.fromBigInt(value));
  }

  get sqrtPriceX96(): BigInt {
    let value = this.get("sqrtPriceX96");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sqrtPriceX96(value: BigInt) {
    this.set("sqrtPriceX96", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get tick(): BigInt {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt) {
    this.set("tick", Value.fromBigInt(value));
  }
}

export class MainAssetPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MainAssetPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MainAssetPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MainAssetPrice", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MainAssetPrice | null {
    return changetype<MainAssetPrice | null>(
      store.get_in_block("MainAssetPrice", id),
    );
  }

  static load(id: string): MainAssetPrice | null {
    return changetype<MainAssetPrice | null>(store.get("MainAssetPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }
}

export class PancakeSwapPoolLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PancakeSwapPool[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PancakeSwapPool[]>(value);
  }
}

export class SwapLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Swap[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Swap[]>(value);
  }
}

export class CandlestickLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Candlestick[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Candlestick[]>(value);
  }
}

export class UserTokenSaleLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserTokenSale[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserTokenSale[]>(value);
  }
}

export class UserLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): User[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<User[]>(value);
  }
}

export class RawTokenSaleCreatedEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RawTokenSaleCreatedEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RawTokenSaleCreatedEvent[]>(value);
  }
}

export class RawTokenSaleConfigEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RawTokenSaleConfigEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RawTokenSaleConfigEvent[]>(value);
  }
}

export class RawTokenSaleFinishedEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RawTokenSaleFinishedEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RawTokenSaleFinishedEvent[]>(value);
  }
}

export class RawSwapEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RawSwapEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RawSwapEvent[]>(value);
  }
}

export class RawSyncEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RawSyncEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RawSyncEvent[]>(value);
  }
}

export class RawRedeemEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RawRedeemEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RawRedeemEvent[]>(value);
  }
}
